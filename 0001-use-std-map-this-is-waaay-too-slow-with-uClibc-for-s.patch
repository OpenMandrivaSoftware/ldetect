From 1b7d4c259028d925b9a2527761c8dd5eaf70f0e2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?"proyvind=20(Per=20=C3=98yvind=20Karlsen)"?=
 <peroyvind@mandriva.org>
Date: Thu, 17 Jan 2013 00:58:23 +0100
Subject: [PATCH] use std::map (this is waaay too slow with uClibc++ for some
 reasaon)

---
 usb.cpp      |  4 ++--
 usbnames.cpp | 45 ++++++++++++++++++++++++++++++++++++---------
 usbnames.h   | 17 ++++++++++++-----
 3 files changed, 50 insertions(+), 16 deletions(-)

diff --git a/usb.cpp b/usb.cpp
index f7052d7..76085b6 100644
--- a/usb.cpp
+++ b/usb.cpp
@@ -87,8 +87,8 @@ void usb::probe(void) {
 	    }
 
 	    e.text += "|";
-	    const char *productName = _names.getProduct(e.vendor, e.device);
-	    if (productName == nullptr) {
+	    std::string productName = _names.getProduct(e.vendor, e.device);
+	    if (productName.empty()) {
 		std::string product;
 		getline(f, product);
 		e.text += product;
diff --git a/usbnames.cpp b/usbnames.cpp
index ffec0b1..8094557 100644
--- a/usbnames.cpp
+++ b/usbnames.cpp
@@ -34,8 +34,10 @@
 
 namespace ldetect {
 
+    static const std::string emptyString;
 /* ---------------------------------------------------------------------- */
 
+#if 0
 #define HASH1  0x10
 #define HASH2  0x02
 
@@ -48,6 +50,7 @@ static uint32_t hashnum(uint32_t num)
 			num ^= mask2;
 	return num & (HASHSZ-1);
 }
+#endif
 
 /* ---------------------------------------------------------------------- */
 
@@ -102,21 +105,31 @@ const char *usbNames::getCountryCode(uint32_t countrycode)
 }
 #endif
 
-const char *usbNames::getVendor(uint16_t vendorid)
+const std::string& usbNames::getVendor(uint16_t vendorId)
 {
+#if 0
 	for (struct vendor *v = _vendors[hashnum(vendorid)]; v; v = v->next)
 		if (v->vendorid == vendorid)
 			return v->name;
 	return nullptr;
+#else
+    std::map<uint16_t, std::string>::const_iterator it = _vendors.find(vendorId);
+    return it == _vendors.end() ? emptyString : it->second;
+#endif
 }
 
-const char *usbNames::getProduct(uint16_t vendorid, uint16_t productid)
+const std::string& usbNames::getProduct(uint16_t vendorId, uint16_t productId)
 {
+#if 0
 	for (struct product *p = _products[hashnum((vendorid << 16) | productid)];
 			p; p = p->next)
 		if (p->vendorid == vendorid && p->productid == productid)
 			return p->name;
 	return nullptr;
+#else
+    std::map<std::pair<uint16_t,uint16_t>, std::string>::const_iterator it = _products.find(std::pair<uint16_t, uint16_t>(vendorId, productId));
+    return it == _products.end() ? emptyString : it->second;
+#endif
 }
 
 #if 0
@@ -195,8 +208,10 @@ int usbNames::getProductString(char *buf, size_t size, uint16_t vid, uint16_t pi
 #endif
 /* ---------------------------------------------------------------------- */
 
-int usbNames::newVendor(const char *name, uint16_t vendorid)
+#if 0
+int usbNames::newVendor(std::string name, uint16_t vendorId)
 {
+#if 0
 	uint32_t h = hashnum(vendorid);
 	struct vendor *v;
 
@@ -210,11 +225,18 @@ int usbNames::newVendor(const char *name, uint16_t vendorid)
 	v->vendorid = vendorid;
 	v->next = _vendors[h];
 	_vendors[h] = v;
+#else
+	fprintf(stderr, "add: 0x%.4x name: %s\n", vendorId, name.c_str());
+	_vendors.insert(std::pair<uint16_t, std::string>(vendorId, name));
+#endif
 	return 0;
 }
+#endif
 
-int usbNames::newProduct(const char *name, uint16_t vendorid, uint16_t productid)
+#if 0
+int usbNames::newProduct(std::string name, uint16_t vendorid, uint16_t productid)
 {
+#if 0
 	uint32_t h = hashnum((vendorid << 16) | productid);
 	struct product *p;
 
@@ -229,8 +251,12 @@ int usbNames::newProduct(const char *name, uint16_t vendorid, uint16_t productid
 	p->productid = productid;
 	p->next = _products[h];
 	_products[h] = p;
+#else
+	_products[std::pair<uint16_t,uint16_t>(vendorid, productid)] = name;
+#endif
 	return 0;
 }
+#endif
 
 #if 0
 int usbNames::newClassType(const char *name, uint8_t classid)
@@ -623,8 +649,7 @@ void usbNames::parse(instream &f)
 				fprintf(stderr, "Invalid vendor spec at line %u\n", linectr);
 				continue;
 			}
-			if (newVendor(cp, u))
-				fprintf(stderr, "Duplicate vendor spec at line %u vendor %04x %s\n", linectr, u, cp);
+			_vendors[u] = cp;
 			DBG(printf("line %5u vendor %04x %s\n", linectr, u, cp));
 			lastvendor = u;
 #if 0
@@ -642,8 +667,7 @@ void usbNames::parse(instream &f)
 				continue;
 			}
 			if (lastvendor != -1) {
-				if (newProduct(cp, lastvendor, u))
-					fprintf(stderr, "Duplicate product spec at line %u product %04x:%04x %s\n", linectr, lastvendor, u, cp);
+			    _products[std::pair<uint16_t,uint16_t>(lastvendor, u)] = cp;
 				DBG(printf("line %5u product %04x:%04x %s\n", linectr, lastvendor, u, cp));
 				continue;
 			}
@@ -768,17 +792,20 @@ void usbNames::parse(instream &f)
 
 /* ---------------------------------------------------------------------- */
 
-usbNames::usbNames(std::string &&n)
+usbNames::usbNames(std::string &&n) : _vendors(), _products()
 {
 	instream f = i_open(n.c_str());
 
 	parse(f);
+
 }
 
 usbNames::~usbNames()
 {
+#if 0
 	freeList(_vendors);
 	freeList(_products);
+#endif
 #if 0
 	freeList(_class_types);
 	freeList(_subclass_types);
diff --git a/usbnames.h b/usbnames.h
index 409951b..5a08921 100644
--- a/usbnames.h
+++ b/usbnames.h
@@ -25,6 +25,8 @@
 
 #include <sys/types.h>
 #include <cstdint>
+#include <map>
+
 #include "common.h"
 
 /* ---------------------------------------------------------------------- */
@@ -84,8 +86,8 @@ namespace ldetect {
 
 	class usbNames {
 	    public:
-		const char *getVendor(uint16_t vendorid);
-		const char *getProduct(uint16_t vendorid, uint16_t productid);
+		const std::string& getVendor(uint16_t vendorid);
+		const std::string& getProduct(uint16_t vendorid, uint16_t productid);
 #if 0
 		const char *getClassType(uint8_t classid);
 		const char *getSubClass(uint8_t classid, uint8_t subclassid);
@@ -109,9 +111,9 @@ namespace ldetect {
 		usbNames(std::string &&n);
 		~usbNames();
 
-	    private:
-		int newVendor(const char *name, uint16_t vendorid);
-		int newProduct(const char *name, uint16_t vendorid, uint16_t productid);
+	    public:
+		//int newVendor(std::string name, uint16_t vendorid);
+		//int newProduct(std::string name, uint16_t vendorid, uint16_t productid);
 #if 0
 		int newClassType(const char *name, uint8_t classid);
 		int newSubclassType(const char *name, uint8_t classid, uint8_t subclassid);
@@ -129,8 +131,13 @@ namespace ldetect {
 		int newCountryCode(const char *name, uint32_t countrycode);
 #endif
 
+#if 0
 		struct vendor *_vendors[HASHSZ] = { nullptr, };
 		struct product *_products[HASHSZ] = { nullptr, };
+#else
+		std::map<uint16_t, std::string> _vendors;
+		std::map<std::pair<uint16_t, uint16_t>, std::string> _products;
+#endif
 #if 0
 		struct class_type *_class_types[HASHSZ] = { nullptr, };
 		struct subclass_type *_subclass_types[HASHSZ] = { nullptr, };
-- 
1.7.11.3

